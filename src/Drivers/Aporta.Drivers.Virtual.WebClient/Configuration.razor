@using Blazorise.Snackbar
@using Newtonsoft.Json

@using Aporta.Shared.Calls
@using Aporta.Shared.Models
@using Aporta.Drivers.Virtual.Shared
@using Aporta.Drivers.Virtual.Shared.Actions
@using Aporta.Drivers.Virtual.WebClient.Dialogs

@inject IDriverConfigurationCalls ConfigurationCalls;
@inject IDoorCalls DoorCalls;

@if (_configuration == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Readers</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddReaderModal">Add Virtual Reader</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Reader Name</TableHeaderCell>
                                <TableHeaderCell>Reader Number</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var reader in _configuration.Readers)
                            {
                                <TableRow ElementId="@("Reader:" + @reader.Name)">
                                    <TableRowHeader>
                                        @reader.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @reader.Number
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @if (IsReaderAvailableForDelete(reader))
                                                {
                                                    <DropdownItem Clicked="@(async () => await RemoveReader(reader))">Delete</DropdownItem>
                                                    <DropdownDivider/>
                                                }
                                                <DropdownItem Clicked="@(async () => await ShowSwipeBadgeModal(reader.Number))">Swipe Badge</DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>
    
    <BadgeSwipeDialog @ref="_badgeSwipeDialog"
                   PerformSwipeBadgeAction="@BadgeSwipe" />

    <Modal @ref="_addVirtualReaderModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Virtual Reader
                </ModalTitle>
                <CloseButton Clicked="@_addVirtualReaderModal.Hide" />
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addReaderValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty">
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_readerToAdd.Name" id="AddReaderTextEdit">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter a name for the virtual reader
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addVirtualReaderModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddReader())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Snackbar @ref="_snackbar" Color="@_snackbarColor">
        <SnackbarBody>
            @_snackbarMessage
        </SnackbarBody>
    </Snackbar>

    <MessageProvider />
}

@code {
    [Inject]
    IMessageService MessageService { get; set; }

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    private Modal _addVirtualReaderModal;
    private Validations _addReaderValidations;
    private Shared.AddReaderParameter _readerToAdd;

    private BadgeSwipeDialog _badgeSwipeDialog;

    private Endpoint[] _availableAccessPoints;
    
    private Aporta.Drivers.Virtual.Shared.Configuration _configuration;

    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }

    protected override void OnParametersSet()
    {
        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(RawConfiguration);
    }

    protected override async Task OnInitializedAsync()
    {
        _readerToAdd = new Shared.AddReaderParameter();

        await InitializedAvailableEndpoints();
    }

    private async Task InitializedAvailableEndpoints()
    {
        _availableAccessPoints = await DoorCalls.GetAvailableEndpoints();

        StateHasChanged();
    }

    private async Task<bool> PerformAction(ActionType actionType, string parameters)
    {
        try
        {
            await ConfigurationCalls.PerformAction(ExtensionId, actionType.ToString(), parameters);
        }
        catch (Exception exception)
        {
            _snackbarMessage = $"Unable to perform action {actionType.GetDescription()}. {exception.Message}";
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
            return false;
        }

        _snackbarMessage = $"Request to perform action {actionType.GetDescription()} successfully sent";
        _snackbarColor = SnackbarColor.Info;
        if (_snackbar != null) await _snackbar.Show();

        return true;
    }
    
    private async Task ShowSwipeBadgeModal(byte readerNumber)
    {
        _badgeSwipeDialog.ReaderNumberToSwipe = readerNumber;
        await _badgeSwipeDialog.ShowDialog();
    }
    
    private async Task ShowAddReaderModal()
    {
        _readerToAdd = new Shared.AddReaderParameter();
        await _addVirtualReaderModal.Show();
    }
    
    private async Task BadgeSwipe()
    {
        await PerformAction(ActionType.BadgeSwipe, JsonConvert.SerializeObject(new BadgeSwipeAction
        {
            ReaderNumber = _badgeSwipeDialog.ReaderNumberToSwipe,
            CardData = _badgeSwipeDialog.CardDataToSwipe
        }));
    }

    private async Task RemoveReader(Reader readerToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete reader '{readerToRemove.Name}'?", "Delete reader", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        var readerToRemoveSerialized = JsonConvert.SerializeObject(readerToRemove);

        if (await PerformAction(ActionType.RemoveReader, readerToRemoveSerialized))
        {
            await InitializedAvailableEndpoints(); 
        }
    }

    private async Task AddReader()
    {
        if (!await _addReaderValidations.ValidateAll())
        {
            return;
        }
        await _addVirtualReaderModal.Hide();

        if (await PerformAction(ActionType.AddReader, JsonConvert.SerializeObject(_readerToAdd)))
        {
            await InitializedAvailableEndpoints(); 
        }
    }

    private bool IsReaderAvailableForDelete(Reader reader)
    {
        return  _availableAccessPoints.Count(endpoint => endpoint.DriverEndpointId == $"VR{reader.Number}") > 0;
    }
}