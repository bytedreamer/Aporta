@using Aporta.Drivers.Virtual.Shared
@using Blazorise.Snackbar
@using Newtonsoft.Json

@using Aporta.Shared.Calls
@using Aporta.Shared.Models
@using Aporta.Drivers.Virtual.Shared.Actions
@using Aporta.Drivers.Virtual.WebClient.Dialogs
@using Microsoft.AspNetCore.SignalR.Client
@using Aporta.Shared.Messaging

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging
@using Aporta.Drivers.Virtual.Messaging;

@inject IDriverConfigurationCalls ConfigurationCalls;
@inject IDoorCalls DoorCalls;
@inject IInputCalls InputCalls;
@inject IOutputCalls OutputCalls;


@if (_configuration == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Reader Configuration</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddReaderModal">Add Virtual Reader</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Reader Name</TableHeaderCell>
                                <TableHeaderCell>Reader Number</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var reader in _configuration.Readers)
                            {
                                <TableRow ElementId="@("Reader:" + @reader.Name)">
                                    <TableRowHeader>
                                        @reader.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @reader.Number
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                <DropdownItem Clicked="@(async () => await ShowEditReaderModal(reader))">Edit</DropdownItem>
                                                @if (IsReaderAvailableForDelete(reader))
                                                {
                                                    <DropdownItem Clicked="@(async () => await RemoveReader(reader))" Disabled="false">Delete</DropdownItem>
                                                } else
                                                {
                                                    <DropdownItem Disabled="true">Assigned to @_doors.First(d => d.InAccessEndpointId == reader.Number || d.OutAccessEndpointId == reader.Number).Name</DropdownItem>
                                                }                                                
                                                <DropdownDivider/>
                                                <DropdownItem Clicked="@(async () => await ShowSwipeBadgeModal(reader.Number))">Swipe Badge</DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Input Configuration</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddInputModal">Add Virtual Input</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Input Name</TableHeaderCell>
                                <TableHeaderCell>Input Number</TableHeaderCell>
                                <TableHeaderCell>State</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var configDeviceInput in _configuration.Inputs)
                            {
                                var inputToDisplay = GetInput(configDeviceInput.Number);
                                <TableRow ElementId="@("Input:" + @configDeviceInput.Name)">
                                    <TableRowHeader>
                                        @configDeviceInput.Name                                        
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @configDeviceInput.Number
                                    </TableRowCell>
                                    <TableRowCell>
                                        @if (inputToDisplay == null)
                                        {
                                            <Icon Name="IconName.Clear" Style="color: white"></Icon>
                                        }
                                        else if (_inputStates.ContainsKey(inputToDisplay.Id) && _inputStates[inputToDisplay.Id].HasValue && _inputStates[inputToDisplay.Id].Value)
                                        {
                                            <Icon Name="IconName.ArrowUp" Style="color: red" />
                                        }
                                        else if (_inputStates.ContainsKey(inputToDisplay.Id) && _inputStates[inputToDisplay.Id].HasValue && !_inputStates[inputToDisplay.Id].Value)
                                        {
                                            <Icon Name="IconName.ArrowDown" Style="color: green" />
                                        }
                                        else
                                        {
                                            <Icon Name="IconName.Clear" Style="color: white"></Icon>
                                        }
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                <DropdownItem Clicked="@(async () => await ShowEditInputModal(configDeviceInput))">Edit</DropdownItem>
                                                @if (IsInputAvailableForDelete(configDeviceInput))
                                                {
                                                    <DropdownItem Clicked="@(async () => await RemoveInput(configDeviceInput))" Disabled="false">Delete</DropdownItem>
                                                }
                                                else
                                                {
                                                    @if (inputToDisplay != null)
                                                    {
                                                        <DropdownItem Disabled="true">Assigned to @_inputs.First(i => i.Id == inputToDisplay.Id).Name</DropdownItem>
                                                    }
                                                    
                                                }
                                                @if (inputToDisplay != null)
                                                {
                                                    <DropdownDivider />
                                                    @if (_inputStates.ContainsKey(inputToDisplay.Id) && _inputStates[inputToDisplay.Id].HasValue && _inputStates[inputToDisplay.Id].Value)
                                                    {
                                                        <DropdownItem Clicked="@(async () => await InputCalls.SetInputState(inputToDisplay.Id, false))">Deactivate</DropdownItem>
                                                    }
                                                    else if (_inputStates.ContainsKey(inputToDisplay.Id) && _inputStates[inputToDisplay.Id].HasValue && !_inputStates[inputToDisplay.Id].Value)
                                                    {
                                                        <DropdownItem Clicked="@(async () => await InputCalls.SetInputState(inputToDisplay.Id, true))">Activate</DropdownItem>
                                                    }
                                                }

                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    <Row Margin="Margin.Is2.OnY">
                        <Column>
                            <Heading>Virtual Output Configuration</Heading>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Button Color="Color.Primary" Clicked="ShowAddOutputModal">Add Virtual Output</Button>
                        </Column>
                    </Row>
                </CardTitle>
                <CardBody>
                    <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Output Name</TableHeaderCell>
                                <TableHeaderCell>Output Number</TableHeaderCell>
                                <TableHeaderCell>State</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var configDeviceOutput in _configuration.Outputs)
                            {
                                var output = GetOutput(configDeviceOutput.Number);
                                <TableRow ElementId="@("Output:" + @configDeviceOutput.Name)">
                                    <TableRowHeader>
                                        @configDeviceOutput.Name
                                    </TableRowHeader>
                                    <TableRowCell>
                                        @configDeviceOutput.Number
                                    </TableRowCell>
                                    <TableRowCell>
                                        @if (output == null)
                                        {
                                            <Icon Name="IconName.Clear" Style="color: white"></Icon>
                                        }else if (_outputStates.ContainsKey(output.Id) && _outputStates[output.Id].HasValue && _outputStates[output.Id].Value)
                                        {
                                            <Icon Name="IconName.ArrowUp" Style="color: red" />
                                        }
                                        else if (_outputStates.ContainsKey(output.Id) && _outputStates[output.Id].HasValue && !_outputStates[output.Id].Value)
                                        {
                                            <Icon Name="IconName.ArrowDown" Style="color: green" />
                                        } else
                                        {
                                            <Icon Name="IconName.Clear" Style="color: white"></Icon>
                                        }
                                    </TableRowCell>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                <DropdownItem Clicked="@(async () => await ShowEditOutputModal(configDeviceOutput))">Edit</DropdownItem>
                                                @if (IsOutputAvailableForDelete(configDeviceOutput))
                                                {
                                                    <DropdownItem Clicked="@(async () => await RemoveOutput(configDeviceOutput))" Disabled="false">Delete</DropdownItem>
                                                } else
                                                {
                                                    <DropdownItem Disabled="true">Assigned to @GetOutputOrDoorNameAssigned(configDeviceOutput.Number)</DropdownItem>
                                                }
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>

    <AddEditDeviceDialog @ref="_addEditDeviceDialog" PerformAction="@AddEditDevice" />

    <BadgeSwipeDialog @ref="_badgeSwipeDialog" PerformSwipeBadgeAction="@BadgeSwipe" />

    <Snackbar @ref="_snackbar" Color="@_snackbarColor">
        <SnackbarBody>
            @_snackbarMessage
        </SnackbarBody>
    </Snackbar>

    <MessageProvider />
}

@code {
    [Inject]
    IMessageService MessageService { get; set; }

    private HubConnection _hubConnection;

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    private AddEditDeviceDialog _addEditDeviceDialog;

    private BadgeSwipeDialog _badgeSwipeDialog;

    private Endpoint[] _availableEndPoints;
    // private readonly Dictionary<int, bool?> _inputStates = new();
    // private readonly Dictionary<int, bool?> _outputStates = new();

    private Aporta.Drivers.Virtual.Shared.Configuration _configuration;

    // private IEnumerable<Input> _inputs;
    // private IEnumerable<Output> _outputs;
    private IEnumerable<Door> _doors;
    private IEnumerable<Endpoint> _outputEndPoints;
    private IEnumerable<Endpoint> _inputEndPoints;

    private List<Input> _inputs;
    private readonly Dictionary<int, bool?> _inputStates = new();

    private List<Output> _outputs;
    private readonly Dictionary<int, bool?> _outputStates = new();

    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }

    protected override void OnParametersSet()
    {
        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(RawConfiguration);

    }

    protected override async Task OnInitializedAsync()
    {
        await InitializeAvailableEndpoints();

        _outputs = await OutputCalls.GetAllOutputs();
        _outputEndPoints = await OutputCalls.GetAllOutputEndpoints();
        _inputEndPoints = await InputCalls.GetAllInputEndpoints();
        _inputs = await InputCalls.GetAllInputs();
        _doors = await DoorCalls.GetAllDoors();

        if (RawConfiguration != null)
        {
            _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.Virtual.Shared.Configuration>(RawConfiguration);
        }
        

        foreach(var output in _outputs)
        {
            _outputStates[output.Id] = await OutputCalls.GetOutputState(output.Id);
        }

        foreach (var input in _inputs)
        {
            _inputStates[input.Id] = await InputCalls.GetInputState(input.Id);
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect(new SignalRRetryPolicy())
            .Build();
        _hubConnection.On<int>(Methods.OutputInserted, async outputId =>
        {
            _outputs.Add(await OutputCalls.GetOutput(outputId));
            _outputStates[outputId] = await OutputCalls.GetOutputState(outputId); 
            _outputEndPoints = await OutputCalls.GetAllOutputEndpoints();
            _availableEndPoints = await DoorCalls.GetAvailableEndpoints();
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.OutputDeleted, async outputId =>
        {
            var output = _outputs.FirstOrDefault(o => o.Id == outputId);
            if (output == null) return;

            _outputs.Remove(output);
            _outputStates.Remove(output.Id);
            _outputEndPoints = await OutputCalls.GetAllOutputEndpoints();
            _availableEndPoints = await DoorCalls.GetAvailableEndpoints();
            StateHasChanged();
        });
        _hubConnection.On<int, bool>(Methods.OutputStateChanged, (outputId, newState) =>
        {
            _outputStates[outputId] = newState;

            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.InputInserted, async inputId =>
        {
            _inputs.Add(await InputCalls.GetInput(inputId));
            _inputStates[inputId] = await InputCalls.GetInputState(inputId); 
            _inputEndPoints = await InputCalls.GetAllInputEndpoints();
            _availableEndPoints = await DoorCalls.GetAvailableEndpoints();
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.InputDeleted, async inputId =>
        {
            var input = _inputs.FirstOrDefault(i => i.Id == inputId);
            if (input == null) return;

            _inputs.Remove(input);
            _inputStates.Remove(input.Id);
            _inputEndPoints = await InputCalls.GetAllInputEndpoints();
            _availableEndPoints = await DoorCalls.GetAvailableEndpoints();
            StateHasChanged();
        });
        _hubConnection.On<int, bool>(Methods.InputStateChanged, (input, newState) =>
        {
            _inputStates[input] = newState;

            StateHasChanged();
        });
        await _hubConnection.StartAsync();

    }

    private async Task InitializeAvailableEndpoints()
    {
        _availableEndPoints = await DoorCalls.GetAvailableEndpoints();

        StateHasChanged();
    }


    private Output GetOutput(int configuredOutputDeviceID)
    {
        var outputEndPoint = _outputEndPoints.FirstOrDefault(endpoint => endpoint.DriverEndpointId == $"VO{configuredOutputDeviceID}");

        if (outputEndPoint == null) return null;

        return _outputs.FirstOrDefault(o => o.EndpointId == outputEndPoint.Id);
    }

    private Input GetInput(int configuredInputDeviceID)
    {
        var inputEndPoint = _inputEndPoints.FirstOrDefault(endpoint => endpoint.DriverEndpointId == $"VI{configuredInputDeviceID}");

        if (inputEndPoint == null) return null;

        return _inputs.FirstOrDefault(i => i.EndpointId == inputEndPoint.Id);

    }


    private async Task<bool> PerformAction(ActionType actionType, string parameters)
    {
        try
        {
            await ConfigurationCalls.PerformAction(ExtensionId, actionType.ToString(), parameters);
        }
        catch (Exception exception)
        {
            _snackbarMessage = $"Unable to perform action {actionType.GetDescription()}. {exception.Message}";
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
            return false;
        }

        _snackbarMessage = $"Request to perform action {actionType.GetDescription()} successfully sent";
        _snackbarColor = SnackbarColor.Info;
        if (_snackbar != null) await _snackbar.Show();

        return true;
    }

    private async Task ShowSwipeBadgeModal(byte readerNumber)
    {
        _badgeSwipeDialog.ReaderNumberToSwipe = readerNumber;
        await _badgeSwipeDialog.ShowDialog();
    }

    private async Task ShowAddReaderModal()
    {
        _addEditDeviceDialog.IsAdding = true;
        _addEditDeviceDialog.Number = 0;
        _addEditDeviceDialog.Name = string.Empty;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Reader;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task ShowEditReaderModal(Device reader)
    {
        _addEditDeviceDialog.IsAdding = false;
        _addEditDeviceDialog.Number = reader.Number;
        _addEditDeviceDialog.Name = reader.Name;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Reader;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task RemoveReader(Device readerToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete reader '{readerToRemove.Name}'?", "Delete reader", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        var readerToRemoveSerialized = JsonConvert.SerializeObject(readerToRemove);

        if (await PerformAction(ActionType.RemoveReader, readerToRemoveSerialized))
        {
            await InitializeAvailableEndpoints(); 
        }
    }

    private async Task BadgeSwipe()
    {
        await PerformAction(ActionType.BadgeSwipe, JsonConvert.SerializeObject(new BadgeSwipeAction
        {
            ReaderNumber = _badgeSwipeDialog.ReaderNumberToSwipe,
            CardData = _badgeSwipeDialog.CardDataToSwipe
        }));
    }

    private async Task ShowAddInputModal()
    {
        _addEditDeviceDialog.IsAdding = true;
        _addEditDeviceDialog.Number = 0;
        _addEditDeviceDialog.Name = string.Empty;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Input;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task ShowEditInputModal(Device input)
    {
        _addEditDeviceDialog.IsAdding = false;
        _addEditDeviceDialog.Number = input.Number;
        _addEditDeviceDialog.Name = input.Name;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Input;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task RemoveInput(Device inputToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete input '{inputToRemove.Name}'?", "Delete input", options =>
            {
                options.ShowMessageIcon = false;
                options.ConfirmButtonColor = Color.Danger;
            }))
        {
            return;
        }

        var inputToRemoveSerialized = JsonConvert.SerializeObject(inputToRemove);

        if (await PerformAction(ActionType.RemoveInput, inputToRemoveSerialized))
        {
            await InitializeAvailableEndpoints();
        }
    }

    private async Task ShowAddOutputModal()
    {
        _addEditDeviceDialog.IsAdding = true;
        _addEditDeviceDialog.Number = 0;
        _addEditDeviceDialog.Name = string.Empty;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Output;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task ShowEditOutputModal(Device output)
    {
        _addEditDeviceDialog.IsAdding = false;
        _addEditDeviceDialog.Number = output.Number;
        _addEditDeviceDialog.Name = output.Name;
        _addEditDeviceDialog.Type = AddEditDeviceDialog.DeviceType.Output;

        await _addEditDeviceDialog.ShowDialog();
    }

    private async Task RemoveOutput(Device outputToRemove)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete output '{outputToRemove.Name}'?", "Delete output", options =>
            {
                options.ShowMessageIcon = false;
                options.ConfirmButtonColor = Color.Danger;
            }))
        {
            return;
        }

        var outputToRemoveSerialized = JsonConvert.SerializeObject(outputToRemove);

        if (await PerformAction(ActionType.RemoveOutput, outputToRemoveSerialized))
        {
            await InitializeAvailableEndpoints();
        }
    }

    private async Task AddEditDevice()
    {
        var actionTypeList = new Dictionary<AddEditDeviceDialog.DeviceType, ActionType>
        {
            { AddEditDeviceDialog.DeviceType.Reader, ActionType.AddUpdateReader },
            { AddEditDeviceDialog.DeviceType.Input, ActionType.AddUpdateInput },
            { AddEditDeviceDialog.DeviceType.Output, ActionType.AddUpdateOutput }
        };

        if (await PerformAction(actionTypeList[_addEditDeviceDialog.Type], JsonConvert.SerializeObject(
                new Device{Name = _addEditDeviceDialog.Name, Number = _addEditDeviceDialog.Number})))
        {
            await InitializeAvailableEndpoints();
        }
    }

    private bool IsReaderAvailableForDelete(Device reader)
    {
        return _availableEndPoints.Count(endpoint => endpoint.DriverEndpointId == $"VR{reader.Number}") > 0;
    }

    private bool IsInputAvailableForDelete(Device input)
    {
        return _availableEndPoints.Count(endpoint => endpoint.DriverEndpointId == $"VI{input.Number}") > 0;
    }

    private bool IsOutputAvailableForDelete(Device output)
    {
        return _availableEndPoints.Count(endpoint => endpoint.DriverEndpointId == $"VO{output.Number}") > 0;
    }

    private string GetOutputOrDoorNameAssigned(int outputID)
    {
        var outputEndPoint = _outputEndPoints.FirstOrDefault(endpoint => endpoint.DriverEndpointId == $"VO{outputID}");

        if (outputEndPoint == null) return string.Empty;

        var output = _outputs.FirstOrDefault(o => o.EndpointId == outputEndPoint.Id);
        if (output != null) return output.Name;

        var door = _doors.FirstOrDefault(d => d.DoorStrikeEndpointId == outputEndPoint.Id || d.DoorContactEndpointId == outputEndPoint.Id);
        if (door != null) return door.Name;

        return string.Empty;
    }

}