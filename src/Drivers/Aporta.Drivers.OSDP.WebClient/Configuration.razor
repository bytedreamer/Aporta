@using Blazorise.Snackbar
@using Newtonsoft.Json

@using Aporta.Shared.Calls
@using Aporta.Shared.Models
@using Aporta.Drivers.OSDP.Shared
@using Aporta.Drivers.OSDP.Shared.Actions
@using Aporta.Drivers.OSDP.WebClient.Dialogs

@inject IDriverConfigurationCalls ConfigurationCalls;

@if (_configuration == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        <Row>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (_unusedPorts.Any())
                {
                    <Button Color="Color.Primary" Clicked="@_addPortDialog.ShowDialog">Add RS-485 Port</Button>
                }
                else
                {
                    <Alert Color="Color.Warning" Visible="true">
                        <AlertMessage>Add RS-485 Port</AlertMessage>
                        <AlertDescription>None are available</AlertDescription>
                    </Alert>
                }
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                <Button Color="Color.Secondary" Clicked="@RescanPorts">Rescan Available RS-485 Ports</Button>
            </Column>
        </Row>
        @foreach (var bus in _configuration.Buses)
        {
            <Row ElementId="@("Bus:" + bus.PortName)">
                <Column>
                    <Card Margin="Margin.Is4.OnY">
                        <CardTitle Margin="Margin.Is4.OnX">
                            <Row Margin="Margin.Is2.OnY">
                                <Column ColumnSize="ColumnSize.IsHalf">
                                    <Heading Size="HeadingSize.Is5">
                                        Port @bus.PortName Devices
                                    </Heading>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsHalf" TextAlignment="TextAlignment.End">
                                    <Dropdown>
                                        <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                            Action
                                        </DropdownToggle>
                                        <DropdownMenu>
                                            <DropdownItem Clicked="@(() => ShowAddDeviceDialog(bus.PortName))">Add Device</DropdownItem>
                                            <DropdownDivider/>
                                            <DropdownItem Clicked="@(async () => await RemoveBus(bus.PortName))">Delete</DropdownItem>
                                        </DropdownMenu>
                                    </Dropdown>
                                </Column>
                            </Row>
                        </CardTitle>
                        <CardBody>
                            <Table Narrow="true" Hoverable="true" ThemeContrast="ThemeContrast.Light">
                                <TableHeader>
                                    <TableRow>
                                        <TableHeaderCell>Status</TableHeaderCell>
                                        <TableHeaderCell>Name</TableHeaderCell>
                                        <TableHeaderCell>Address</TableHeaderCell>
                                        <TableHeaderCell></TableHeaderCell>
                                    </TableRow>
                                </TableHeader>
                                <TableBody>
                                    @foreach (var device in bus.Devices.OrderBy(device => device.Address))
                                    {
                                        <TableRow ElementId="@("Device:" + @device.Name)">
                                            <TableRowCell Clicked="@(async () => await ShowDetails(device))">
                                                <Tooltip Text="@GetConnectionStatus(device)" Inline="true">
                                                    <Icon Name="@GetConnectionStatusIcon(device)" Style="@GetConnectionStatusIconColor(device)"/>
                                                    <Icon Name="@GetSecurityStatusIcon(device)" Style="@GetSecurityStatusIconColor(device)"/>
                                                    <Icon ElementId="PKOCStatusIcon" Name="@GetPkocStatus(device)" Style="color: green"/>
                                                </Tooltip>
                                            </TableRowCell>
                                            <TableRowHeader Clicked="@(async () => await ShowDetails(device))">
                                                @device.Name
                                            </TableRowHeader>
                                            <TableRowCell Clicked="@(async () => await ShowDetails(device))">
                                                @device.Address
                                            </TableRowCell>
                                            <TableRowCell TextAlignment="TextAlignment.End">
                                                <Dropdown>
                                                    <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                        Action
                                                    </DropdownToggle>
                                                    <DropdownMenu>
                                                        @if (device.SecureMode == SecureMode.Clear)
                                                        {
                                                            <DropdownItem Clicked="@(async () => await ResetToInstallMode(device))">Reset Security To Install Mode</DropdownItem>
                                                        }
                                                        else
                                                        {
                                                            <DropdownItem Clicked="@(async () => await ResetToClear(device))">Reset Security To Clear Text</DropdownItem>
                                                        }
                                                        @if (device.SecureMode == SecureMode.Secure)
                                                        {
                                                            <DropdownItem Clicked="@(async () => await RotateKey(device))">Rotate Key</DropdownItem>
                                                        }

                                                        @if (device.PKOCEnabled)
                                                        {
                                                            <DropdownItem Clicked="@(async () => await DisablePKOC(device))">Disable PKOC</DropdownItem>
                                                        }
                                                        else
                                                        {
                                                            <DropdownItem Clicked="@(async () => await EnablePKOC(device))">Enable PKOC</DropdownItem>
                                                        }
                                                        <DropdownDivider/>
                                                        <DropdownItem Clicked="@(async () => await ClearDeviceIdentity(device))">Clear Identity</DropdownItem>
                                                        <DropdownDivider/>
                                                        <DropdownItem Clicked="@(async () => await RemoveDevice(bus.PortName, device.Address, device.Name))">Delete</DropdownItem>
                                                    </DropdownMenu>
                                                </Dropdown>
                                            </TableRowCell>
                                        </TableRow>
                                    }
                                </TableBody>
                            </Table>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        }

        <AddPortDialog @ref="_addPortDialog"
            BaudRates="@_baudRates" 
            UnusedPorts="@_unusedPorts" 
            BusToAdd="@_addBus" 
            PerformAddBusAction="@AddBus" />

        <AddDeviceDialog @ref="_addDeviceDialog"
                         AddToBus="@_currentBus"
                         DeviceToAdd="@_addDevice"
                         PerformAddDeviceAction="@AddDevice"/>
        
        <Modal @ref="_deviceDetailsModal">
            <ModalContent Size="ModalSize.Default" Centered="true">
                <ModalHeader>
                    <ModalTitle>
                        @_detailsDevice?.Name details
                    </ModalTitle>
                    <CloseButton Clicked="@_deviceDetailsModal.Hide"/>
                </ModalHeader>
                <ModalBody>
                    
                    <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Description</TableHeaderCell>
                                <TableHeaderCell>Value</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            <TableRow>
                                <TableRowCell>
                                    Port
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.PortName
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Address
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Address
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Requires Security Using AES-128 Encryption
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.RequireSecurity
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Last Key Rotation Time
                                </TableRowCell>
                                <TableRowCell>
                                    @GetLastKeyRotationTime(_detailsDevice)
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Connection Status
                                </TableRowCell>
                                <TableRowCell>
                                    @GetConnectionStatus(_detailsDevice)
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Vendor Code
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Identification.VendorCode
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Serial Number
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Identification.SerialNumber
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Firmware Version
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Identification.FirmwareVersion
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Access Reader
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Readers.Any()
                                </TableRowCell>
                            </TableRow>
                            @if (_detailsDevice?.Readers.Any() ?? false)
                            {
                                <TableRow>
                                    <TableRowCell>
                                        PKOC Enabled
                                    </TableRowCell>
                                    <TableRowCell>
                                        @_detailsDevice.PKOCEnabled
                                    </TableRowCell>
                                </TableRow>
                            }
                            <TableRow>
                                <TableRowCell>
                                    Number of Inputs
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Inputs.Count
                                </TableRowCell>
                            </TableRow>
                            <TableRow>
                                <TableRowCell>
                                    Number of Outputs
                                </TableRowCell>
                                <TableRowCell>
                                    @_detailsDevice?.Outputs.Count
                                </TableRowCell>
                            </TableRow>
                        </TableBody>
                    </Table>
    
                </ModalBody>
                <ModalFooter>
                    <Button Color="Color.Primary" Clicked="@_deviceDetailsModal.Hide">Close</Button>
                </ModalFooter>
            </ModalContent>
        </Modal>
    }

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

<MessageProvider />

@code {
    [Inject]
    IMessageService MessageService { get; set; }

    private Bus _addBus;
    private Bus _currentBus;
    private Device _addDevice;
    private Device _detailsDevice;
    private string[] _unusedPorts;

    private AddPortDialog _addPortDialog;
    private AddDeviceDialog _addDeviceDialog;
    private Modal _deviceDetailsModal;

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    private readonly IEnumerable<int> _baudRates = new[]
    {
        9600,
        19200,
        38400,
        57600,
        115200,
        230400
    };

    private Aporta.Drivers.OSDP.Shared.Configuration _configuration;

    [Parameter]
    public Guid ExtensionId { get; set; }

    [Parameter]
    public string RawConfiguration { get; set; }

    protected override void OnParametersSet()
    {
        _configuration = JsonConvert.DeserializeObject<Aporta.Drivers.OSDP.Shared.Configuration>(RawConfiguration);

        _addDevice = new Device { Name = string.Empty, Address = 0, RequireSecurity = true };

        InitializeNewBus();
    }

    private void InitializeNewBus()
    {
        _unusedPorts = _configuration.AvailablePorts.Except(_configuration.Buses.Select(bus => bus.PortName)).ToArray();

        _addBus = new Bus
        {
            Devices = [],
            BaudRate = 9600
        };

        if (_unusedPorts.Any())
        {
            _addBus.PortName = _unusedPorts.First();
        }
    }

    private async Task AddBus()
    {
        await PerformAction(ActionType.AddSerialBus,
            JsonConvert.SerializeObject(new BusAction
            {
                Bus = _addBus
            }));
    }

    private async Task RemoveBus(string busPortName)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete bus '{busPortName}'?", "Delete Bus", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        var matchingBus = _configuration.Buses.First(bus => bus.PortName == busPortName);

        await PerformAction(ActionType.RemoveSerialBus,
            JsonConvert.SerializeObject(new BusAction
            {
                Bus = matchingBus
            }));
    }

    private async Task ResetToClear(Device resetToClearDevice)
    {
        if (await MessageService.Confirm($"Are you sure you want to reset device '{resetToClearDevice.Name}' to clear text security?", "Reset To Clear Text Security", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Info;
        }))
        {
            await PerformAction(ActionType.ResetToClear,
                JsonConvert.SerializeObject(new DeviceAction
                {
                    Device = resetToClearDevice
                }));
        }
    }

    private async Task ResetToInstallMode(Device resetToInstallModeDevice)
    {
        if (await MessageService.Confirm($"Are you sure you want to reset device '{resetToInstallModeDevice.Name}' to install mode security? Make sure that the device is configured for install mode.", "Reset To Install Mode Security", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Info;
        }))
        {
            await PerformAction(ActionType.ResetToInstallMode,
                JsonConvert.SerializeObject(new DeviceAction
                {
                    Device = resetToInstallModeDevice
                }));
        }
    }

    private async Task RotateKey(Device rotateKeyDevice)
    {
        await PerformAction(ActionType.RotateKey,
            JsonConvert.SerializeObject(new DeviceAction
            {
                Device = rotateKeyDevice
            }));
    }

    private async Task ClearDeviceIdentity(Device clearIdentityDevice)
    {
        await PerformAction(ActionType.ClearDeviceIdentity,
            JsonConvert.SerializeObject(new DeviceAction
            {
                Device = clearIdentityDevice
            }));
    }
    
    private async Task DisablePKOC(Device disablePKOCOnDevice)
    {
        await PerformAction(ActionType.DisablePKOC,
            JsonConvert.SerializeObject(new DeviceAction
            {
                Device = disablePKOCOnDevice
            }));
    }
    
    private async Task EnablePKOC(Device enablePKOCOnDevice)
    {
        await PerformAction(ActionType.EnablePKOC,
            JsonConvert.SerializeObject(new DeviceAction
            {
                Device = enablePKOCOnDevice
            }));
    }
    
    private async Task ShowAddDeviceDialog(string portName)
    {
        _currentBus = _configuration.Buses.First(bus => bus.PortName == portName);
        _addDevice = new Device { Name = string.Empty, Address = 0, RequireSecurity = true };

        await _addDeviceDialog.ShowDialog();
    }

    private async Task AddDevice()
    {
        _addDevice.PortName = _currentBus.PortName;
        await PerformAction(ActionType.AddUpdateDevice,
            JsonConvert.SerializeObject(new DeviceAction
            {
                Device = _addDevice
            }));
    }

    private async Task RemoveDevice(string portName, byte address, string deviceName)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete device '{deviceName}'?", "Delete Bus", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        _currentBus = _configuration.Buses.First(bus => bus.PortName == portName);

        var removingDevice = _currentBus.Devices.First(device => device.Address == address);

        removingDevice.PortName = _currentBus.PortName;
        await PerformAction(ActionType.RemoveDevice,
            JsonConvert.SerializeObject(new DeviceAction
            {
                Device = removingDevice
            }));
    }

    private async Task<string> PerformAction(ActionType actionType, string parameters)
    {
        string responseData;
        try
        {
            responseData = await ConfigurationCalls.PerformAction(ExtensionId, actionType.ToString(), parameters);
        }
        catch (Exception exception)
        {
            _snackbarMessage = $"Unable to perform action {actionType.GetDescription()}. {exception.Message}";
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
            return string.Empty;
        }
        
        _snackbarMessage = $"Request to perform action {actionType.GetDescription()} successfully sent";
        _snackbarColor = SnackbarColor.Info;
        if (_snackbar != null) await _snackbar.Show();

        return responseData;
    }

    private async Task ShowDetails(Device device)
    {
        _detailsDevice = device;

        await _deviceDetailsModal.Show();
    }

    private async Task RescanPorts()
    {
        string ports = await PerformAction(ActionType.AvailablePorts, "{}");

        _unusedPorts = JsonConvert.DeserializeObject<string[]>(ports).Except(_configuration.Buses.Select(bus => bus.PortName)).ToArray();
    }

    private string GetConnectionStatus(Device device)
    {
        if (device == null) return string.Empty;
        
        if (device.IsConnected)
        {
            return $"Online ({device.SecureMode})";
        }
        if (device.KeyMismatch)
        {
            return "Key Mismatch";
        }
        if (device.IdentityNotMatched)
        {
            return "Identity Mismatch";
        }

        return "Offline";
    }

    private IconName GetConnectionStatusIcon(Device device)
    {
        if (device.IsConnected)
        {
            return IconName.ArrowUp;
        }

        return device.IdentityNotMatched || device.KeyMismatch ? IconName.Exclamation : IconName.ArrowDown;
    }

    private IconName GetSecurityStatusIcon(Device device)
    {
        return device.SecureMode == SecureMode.Secure ? IconName.Lock : IconName.LockOpen;
    }
    
    private object GetPkocStatus(Device device)
    {
        return device.PKOCEnabled ? IconName.Key : null;
    }

    private string GetConnectionStatusIconColor(Device device)
    {
        if (device.IsConnected)
        {
            return "color: green";
        }

        return device.IdentityNotMatched || device.KeyMismatch ? "color: orange" : "color: red";
    }

    private string GetSecurityStatusIconColor(Device device)
    {
        return device.SecureMode == SecureMode.Secure ? "color: green" : "color: red";
    }

    private string GetLastKeyRotationTime(Device device)
    {
        return _detailsDevice?.LastKeyRotation != null && _detailsDevice.LastKeyRotation != default ?
            $"{_detailsDevice?.LastKeyRotation.ToLocalTime().ToShortDateString()} {_detailsDevice?.LastKeyRotation.ToLocalTime().ToShortTimeString()}"
            : "N/A";
    }
}