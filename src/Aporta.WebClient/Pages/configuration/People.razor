@page "/configuration/people"

@using System.Text
@using System.Text.Json

@using Microsoft.AspNetCore.SignalR.Client
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging
@using Aporta.Shared.Models
@using Aporta.WebClient.Messaging

@inject HttpClient Http
@inject NavigationManager NavigationManager

<Heading Size="HeadingSize.Is1">People</Heading>
<Divider />

@if (_people == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column ColumnSize="ColumnSize.Is6.OnDesktop">
            <Button Color="Color.Primary" Clicked="_addPersonModal.Show">Add Person</Button>
        </Column>
    </Row>
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <Table Hoverable="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Status</TableHeaderCell>
                                <TableHeaderCell>First Name</TableHeaderCell>
                                <TableHeaderCell>Last Name</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var person in _people.OrderBy(person => person.FirstName))
                            {
                                <TableRow>
                                    <TableRowCell Clicked="@(async () => await ShowDetails(person))">
                                        @if (person.Enabled)
                                        {
                                            <Tooltip Text="Enabled" Inline="true">
                                                <Icon Name="IconName.Check" Style="color: green"/>
                                            </Tooltip>
                                        }
                                        else
                                        {
                                            <Tooltip Text="Disabled" Inline="true">
                                                <Icon Name="IconName.MinusCircle" Style="color: red"/>
                                            </Tooltip>
                                        }
                                        @if (PersonIsEnrolled(person.Id))
                                        {
                                            <Tooltip Text="Enrolled" Inline="true">
                                                <Icon Name="IconName.CreditCard" Margin="Margin.Is2.FromStart"/>
                                            </Tooltip>
                                        }
                                    </TableRowCell>
                                    <TableRowHeader Clicked="@(async () => await ShowDetails(person))">
                                        @person.FirstName
                                    </TableRowHeader>
                                    <TableRowHeader Clicked="@(async () => await ShowDetails(person))">
                                        @person.LastName
                                    </TableRowHeader>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                            <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                Action
                                            </DropdownToggle>
                                            <DropdownMenu>
                                                @if (!PersonIsEnrolled(person.Id))
                                                {
                                                    <DropdownItem Clicked="@(async () => await ShowEnroll(person))">Enroll</DropdownItem>
                                                    <DropdownDivider/>
                                                }
                                                
                                                <DropdownItem Clicked="@(async () => await RemovePerson(person))">Delete</DropdownItem>
                                            </DropdownMenu>
                                        </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>
    
    <Modal @ref="_addPersonModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Add Person
                </ModalTitle>
                <CloseButton Clicked="@_addPersonModal.Hide"/>
            </ModalHeader>
            <ModalBody>
                <Validations Mode="ValidationMode.Auto" ValidateOnLoad="false" @ref="_addPersonValidations">
                    <Validation Validator="@ValidationRule.IsNotEmpty" >
                        <Field>
                            <FieldLabel>First Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addPerson.FirstName">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter the person's first name
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation Validator="@ValidationRule.IsNotEmpty" >
                        <Field>
                            <FieldLabel>Last Name</FieldLabel>
                            <FieldBody>
                                <TextEdit @bind-Text="_addPerson.LastName">
                                    <Feedback>
                                        <ValidationError>
                                            Please enter the person's last name
                                        </ValidationError>
                                    </Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Field>
                        <FieldLabel>Enabled</FieldLabel>
                        <FieldBody>
                            <Check Checked="@_addPerson.Enabled" />
                        </FieldBody>
                    </Field>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_addPersonModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await AddPerson())">Add</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
    
    <Modal @ref="_enrollModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Enroll credential
                </ModalTitle>
                <CloseButton Clicked="@_enrollModal.Hide"/>
            </ModalHeader>
            <ModalBody>
                
                <Field>
                    <FieldLabel>Select an badge event to enroll</FieldLabel>
                    <FieldBody>
                        <Select TValue="int" @bind-SelectedValue="@_enrollCredentialId">
                            @foreach (var availableCredential in _availableCredentialsForEnrollment)
                            {
                                <SelectItem Value="availableCredential.Item1.Id">@availableCredential.Item2.Timestamp.ToLocalTime() at @availableCredential.Item3?.Door?.Name</SelectItem>
                            }
                        </Select>
                    </FieldBody>
                </Field>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@_enrollModal.Hide">Cancel</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await EnrollPerson())">Enroll</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
    
    <Modal @ref="_personDetailsModal">
        <ModalContent Size="ModalSize.Default" Centered="true">
            <ModalHeader>
                <ModalTitle>
                    Person details
                </ModalTitle>
                <CloseButton Clicked="@_enrollModal.Hide"/>
            </ModalHeader>
            <ModalBody>
                
                <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                    <TableHeader>
                        <TableRow>
                            <TableHeaderCell>Description</TableHeaderCell>
                            <TableHeaderCell>Value</TableHeaderCell>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        <TableRow>
                            <TableRowCell>
                                First name
                            </TableRowCell>
                            <TableRowCell>
                                @_detailsPerson.FirstName
                            </TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell>
                                Last name
                            </TableRowCell>
                            <TableRowCell>
                                @_detailsPerson.LastName
                            </TableRowCell>
                        </TableRow>
                        <TableRow>
                            <TableRowCell>
                                Badge is enrolled
                            </TableRowCell>
                            <TableRowCell>
                                @PersonIsEnrolled(_detailsPerson.Id)
                            </TableRowCell>
                        </TableRow>
                        @if (PersonIsEnrolled(_detailsPerson.Id))
                        {
                            <TableRow>
                                <TableRowCell>
                                    Badge number
                                </TableRowCell>
                                <TableRowCell>
                                    @PersonsBadgeIdentifier(_detailsPerson.Id)
                                </TableRowCell>
                            </TableRow>
                        }
                        <TableRow>
                            <TableRowCell>
                                Person is enabled
                            </TableRowCell>
                            <TableRowCell>
                                @_detailsPerson.Enabled
                            </TableRowCell>
                        </TableRow>
                    </TableBody>
                </Table>

            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@_personDetailsModal.Hide">Close</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

<MessageProvider />


@code {
    [Inject] 
    IMessageService MessageService { get; set; }
    
    private List<Person> _people;
    private List<Credential> _assigned;
    private Person _addPerson;
    private Person _enrollPerson;
    private Person _detailsPerson;
    private int _enrollCredentialId;

    private readonly List<Tuple<Credential, Event, EventData>> _availableCredentialsForEnrollment = new();
    
    private HubConnection _hubConnection;

    private Modal _addPersonModal;
    private Validations _addPersonValidations;
    
    private Modal _enrollModal;
    
    private Modal _personDetailsModal;
    
    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        _people = await Http.GetFromJsonAsync<List<Person>>(Paths.People);
        _assigned = await Http.GetFromJsonAsync<List<Credential>>($"{Paths.Credentials}/assigned");
        
        _addPerson = new Person{Enabled = true};
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect(new SignalRRetryPolicy())
            .Build();
        _hubConnection.On<int>(Methods.PersonInserted, async personId =>
        {
            _people.Add( await Http.GetFromJsonAsync<Person>($"{Paths.People}/{personId}"));
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.PersonUpdated, async personId =>
        {
            var person = await Http.GetFromJsonAsync<Person>($"{Paths.People}/{personId}");

            int indexToReplace = _people.FindIndex(matchedPerson => matchedPerson.Id == personId);

            if (indexToReplace >= 0) _people[indexToReplace] = person;
            else _people.Add(person);
            
            _assigned = await Http.GetFromJsonAsync<List<Credential>>($"{Paths.Credentials}/assigned");

            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.PersonDeleted, personId =>
        {
            var person = _people.FirstOrDefault(o => o.Id == personId);
            if (person == null) return;

            _people.Remove(person);

            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task AddPerson()
    {
        if (!await _addPersonValidations.ValidateAll())
        {
            return;
        }
        await _addPersonModal.Hide();

        const string url = Paths.People;
        var response = await Http.PutAsync(url,
            new StringContent(JsonSerializer.Serialize(_addPerson), Encoding.UTF8, "application/json"));
        if (response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Successfully added person";
            _snackbarColor = SnackbarColor.Success;
        }
        else
        {
            _snackbarMessage = "Unable to add person";
            _snackbarColor = SnackbarColor.Danger;
        }
    }

    private async Task RemovePerson(Person person)
    {
        if (!await MessageService.Confirm($"Are you sure you want to delete person '{person.FirstName} {person.LastName}'?", "Delete Person", options =>
        {
            options.ShowMessageIcon = false;
            options.ConfirmButtonColor = Color.Danger;
        }))
        {
            return;
        }

        string url = $"{Paths.People}/{person.Id}";
        var response = await Http.DeleteAsync(url);

        if (response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Successfully removed person";
            _snackbarColor = SnackbarColor.Success;
        }
        else
        {
            _snackbarMessage = "Unable to remove person";
            _snackbarColor = SnackbarColor.Danger;
        }
        await _snackbar.Show();
    }
    
    private async Task ShowDetails(Person person)
    {
        _detailsPerson = person;
        
        await _personDetailsModal.Show();
    }

    private async Task ShowEnroll(Person person)
    {
        _enrollPerson = person;
        _availableCredentialsForEnrollment.Clear();

        string url = $"{Paths.Credentials}/unassigned";
        var unassignedCredentials = await Http.GetFromJsonAsync<List<Credential>>(url);
        if (unassignedCredentials.Count == 0)
        {
            _snackbarMessage = "No unassigned credentials are available. Swipe an unassigned card at a reader.";
            _snackbarColor = SnackbarColor.Warning;
            await _snackbar.Show();
            return;
        }

        foreach (var credential in unassignedCredentials)
        {
            url = $"{Paths.Events}/{credential.LastEvent}";
            try
            {
                var lastEvent = await Http.GetFromJsonAsync<Event>(url);
                var eventData = JsonSerializer.Deserialize<EventData>(lastEvent.Data);
                _availableCredentialsForEnrollment.Add(new Tuple<Credential, Event, EventData>(credential, lastEvent, eventData));
            }
            catch
            {
                // ignored
            }
        }

        _availableCredentialsForEnrollment.Sort(CompareLastEventDescending);

        _enrollCredentialId = _availableCredentialsForEnrollment.First().Item1.Id;

        await _enrollModal.Show();
        return;

        static int CompareLastEventDescending(Tuple<Credential, Event, EventData> x, Tuple<Credential, Event, EventData> y)
        {
            return y.Item1.LastEvent.CompareTo(x.Item1.LastEvent);
        }
    }

    private async Task EnrollPerson()
    {
        await _enrollModal.Hide();
        
        string url = $"{Paths.Credentials}/{_enrollCredentialId}/enroll/{_enrollPerson.Id}";
        var response = await Http.PostAsync(url, new StringContent(string.Empty));

        if (response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Successfully enrolled person";
            _snackbarColor = SnackbarColor.Success;
        }
        else
        {
            _snackbarMessage = "Unable to enroll person";
            _snackbarColor = SnackbarColor.Danger;
        }
        await _snackbar.Show();
    }

    private bool PersonIsEnrolled(int personId)
    {
        return _assigned.Any(credential => credential.AssignedPersonId == personId);
    }
    
    private string PersonsBadgeIdentifier(int personId)
    {
        return _assigned.FirstOrDefault(credential => credential.AssignedPersonId == personId)?.Number ?? string.Empty;
    }
}