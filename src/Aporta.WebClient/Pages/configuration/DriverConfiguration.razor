@page "/configuration/driver/{ExtensionId:guid}"

@using Microsoft.AspNetCore.SignalR.Client
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging
@using Aporta.Shared.Models
@using Aporta.WebClient.Messaging

@inject HttpClient Http
@inject NavigationManager NavigationManager

@implements IDisposable

@if (_extension == null)
{
    <div class="spinner"></div>
}
else
{
    <Heading Size="HeadingSize.Is1">@_extension.Name Driver Configuration</Heading>
    <Divider />
    
    @if (_extension.Id == Guid.Parse("D3C5DE68-E019-48D6-AB58-76F4B15CD0D5"))
    {
        <Aporta.Drivers.OSDP.WebClient.Configuration 
            ExtensionId="@_extension.Id" 
            RawConfiguration="@_extension.Configuration"/>
    }
    else if (_extension.Id == Guid.Parse("6667E442-53B2-4240-A10D-25F5E4400D83"))
    {
        <Aporta.Drivers.Virtual.WebClient.Configuration             
            ExtensionId="@_extension.Id" 
            RawConfiguration="@_extension.Configuration"/>
    }
    else
    {
        <Heading Size="HeadingSize.Is3">No configuration page for this driver</Heading>
    }
}

@code {
    private Extension _extension;
    private HubConnection _hubConnection;
    
    [Parameter]
    public Guid ExtensionId { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        string url = $"{Paths.Extensions}/{ExtensionId}";
        _extension = await Http.GetFromJsonAsync<Extension>(url);
 
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect(new SignalRRetryPolicy())
            .Build();
        _hubConnection.On<Guid>(Methods.ExtensionDataChanged, async _ =>
        {
            _extension = await Http.GetFromJsonAsync<Extension>(url);
            
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }
    
    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}