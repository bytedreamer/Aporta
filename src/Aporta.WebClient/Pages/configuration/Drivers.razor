@page "/configuration/drivers"

@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging
@using Aporta.Shared.Models
@using Aporta.WebClient.Messaging

@inject NavigationManager NavigationManager

@inject IHubProxyFactory HubConnectionBuilder;
@inject IExtensionCalls ExtensionCalls;

@implements IAsyncDisposable

<Heading Size="HeadingSize.Is1">Drivers</Heading>
<Divider />

@if (_extensions == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Column>
            <Card Margin="Margin.Is4.OnY">
                <CardBody>
                    <AportaConfigurationTable>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Status</TableHeaderCell>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var extension in _extensions.OrderBy(extension => extension.Name))
                            {
                                <TableRow HoverCursor="Cursor.Pointer">
                                    <TableRowCell Clicked="() => NavigateToDriverConfiguration(extension.Id)">
                                        <Icon Name="@GetDriverStatusIcon(extension)" Style="@GetDriverStatusColor(extension)"/>
                                    </TableRowCell>
                                    <TableRowHeader Clicked="() => NavigateToDriverConfiguration(extension.Id)">
                                        @extension.Name
                                    </TableRowHeader>
                                    <TableRowCell TextAlignment="TextAlignment.End">
                                        <Dropdown>
                                                <DropdownToggle Color="Color.Primary" Size="Size.Small">
                                                    Action
                                                </DropdownToggle>
                                                <DropdownMenu>
                                                    @if (extension.Enabled)
                                                    {
                                                        <DropdownItem Clicked="@(async () => await ExtensionEnabledChanged(extension.Id, false))">Disable</DropdownItem>
                                                    }
                                                    else
                                                    {
                                                        <DropdownItem Clicked="@(async () => await ExtensionEnabledChanged(extension.Id, true))">Enable</DropdownItem>
                                                    }
                                                </DropdownMenu>
                                            </Dropdown>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </AportaConfigurationTable>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor"> 
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

@code {
    private IEnumerable<Extension> _extensions;
    private IHubProxy _hubConnection;

    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = HubConnectionBuilder.Create(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification));
        _hubConnection.On<Guid>(Methods.ExtensionDataChanged, async _ =>
        {
            await LoadExtensions();

            StateHasChanged();
        });
        await _hubConnection.StartAsync();

        await LoadExtensions();
    }

    private async Task LoadExtensions()
    {
        try
        {
            _extensions = await ExtensionCalls.GetAll();
        }
        catch (Exception exception)
        {
            _extensions = new Extension[] { };
            _snackbarMessage = exception.Message;
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
        }
    }

    private async Task ExtensionEnabledChanged(Guid extensionId, bool checkedValue)
    {
        try
        {
            await ExtensionCalls.ChangeEnableSettings(extensionId, checkedValue);
        }
        catch (Exception exception)
        {
            _snackbarMessage = exception.Message;
            _snackbarColor = SnackbarColor.Danger;
            if (_snackbar != null) await _snackbar.Show();
        }
    }

    private void NavigateToDriverConfiguration(Guid extensionId)
    {
        NavigationManager.NavigateTo($"configuration/driver/{extensionId}");
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_hubConnection != null)
            {
                try
                {
                    await _hubConnection.StopAsync();
                }
                finally
                {
                    await _hubConnection.DisposeAsync();
                }
            }
        }
        catch
        {
            // ignored
        }
    }

    private IconName GetDriverStatusIcon(Extension extension)
    {
        return extension.Enabled switch
        {
            true when extension.Loaded => IconName.Check,
            true when !extension.Loaded => IconName.ExclamationTriangle,
            _ => IconName.MinusCircle
            };
    }

    private string GetDriverStatusColor(Extension extension)
    {
        return extension.Enabled switch
        {
            true when extension.Loaded => "color: green",
            true when !extension.Loaded => "color: orange",
            _ => "color: red"
            };
    }

}