@page "/monitoring"

@using System.Text.Json

@using Microsoft.AspNetCore.SignalR.Client

@using Aporta.Shared.Models
@using Aporta.Shared.Calls
@using Aporta.Shared.Messaging
@using Aporta.WebClient.Messaging

@inject HttpClient Http
@inject NavigationManager NavigationManager

<Heading Size="HeadingSize.Is1">Monitoring</Heading>
<Divider />

@if (_outputs == null)
{
    <div class="spinner"></div>
}
else
{
    <Row>
        <Table Striped="true" Narrow="true" ThemeContrast="ThemeContrast.Light" >
            <TableHeader>
                <TableRow>
                    <TableHeaderCell>Timestamp</TableHeaderCell>
                    <TableHeaderCell>Type</TableHeaderCell>
                    <TableHeaderCell>Reason</TableHeaderCell>
                    <TableHeaderCell>Endpoint</TableHeaderCell>
                    <TableHeaderCell>Door</TableHeaderCell>
                    <TableHeaderCell>Person</TableHeaderCell>
                </TableRow>
            </TableHeader>
            <TableBody>
                @foreach (var eventItem in _events.Items)
                {
                    var eventData = JsonSerializer.Deserialize<EventData>(eventItem.Data);
                    <TableRow Color="@_eventRowColor">
                        <TableRowHeader>
                            @eventItem.Timestamp.ToLocalTime()
                        </TableRowHeader>
                        <TableRowCell>
                            @(eventItem.Type.GetDescription())
                        </TableRowCell>
                        <Tooltip Text="@(eventData.CardNumber ?? string.Empty)" Inline="true">
                            <TableRowCell>
                                @(eventData.EventReason.GetDescription())
                            </TableRowCell>
                        </Tooltip>
                        <TableRowCell>
                            @eventData.Endpoint?.Name
                        </TableRowCell>
                        <TableRowCell>
                            @eventData.Door?.Name
                        </TableRowCell>
                        <TableRowCell>
                            @eventData.Person?.FirstName @eventData.Person?.LastName
                        </TableRowCell>
                    </TableRow>
                }
            </TableBody>
        </Table>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.IsAuto">
            <Button Color="Color.Primary" Size="Size.Small" Margin="Margin.Is4.FromBottom" Clicked="ToggleLiveEventMonitoring">@(_liveEventMonitoring ? "Disable" : "Enable") Live Monitoring</Button>
        </Column> 
        <Column ColumnSize="ColumnSize.IsAuto">
            <Pagination Display="@(_liveEventMonitoring ? Display.None : Display.Always)" Size="Size.Small" Margin="Margin.Is2.FromStart">
                    <PaginationItem Disabled="@IsPageNavigationDisabled(PreviousPageItem)" @onclick="Previous">
                        <PaginationLink>
                            <span aria-hidden="true">«</span>
                        </PaginationLink>
                    </PaginationItem>
                    @{
                        for (var i = 1; i <= _pageItems; i++)
                        {
                            var pageNumberAsString = i.ToString();
                            <PaginationItem @key="pageNumberAsString" Active="@IsActive(pageNumberAsString)">
                                <PaginationLink Page="@pageNumberAsString" Clicked="SetActive">
                                    @pageNumberAsString
                                </PaginationLink>
                            </PaginationItem>
                        }
                    }
                    <PaginationItem Disabled="@IsPageNavigationDisabled(NextPageItem)" @onclick="Next">
                        <PaginationLink>
                            <span aria-hidden="true">»</span>
                        </PaginationLink>
                    </PaginationItem>
                </Pagination>
        </Column>
    </Row>
    
    <Row>
        <Column ColumnSize="ColumnSize.IsHalf">
                <Card Margin="Margin.Is4.OnY">
                    <CardTitle Margin="Margin.Is4.OnX">
                        Inputs
                    </CardTitle>
                    <CardBody>
                        <Table Hoverable="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Name</TableHeaderCell>
                                    <TableHeaderCell>State</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                @foreach (var input in _inputs.OrderBy(output => output.Name))
                                {
                                    <TableRow>
                                        <TableRowHeader>
                                            @input.Name
                                        </TableRowHeader>
                                        <TableRowCell>
                                            @if (_inputStates[input.Id].HasValue && _inputStates[input.Id].Value)
                                            {
                                                <Icon Name="IconName.ArrowUp" Style="color: red"/>
                                            }
                                            else if (_inputStates[input.Id].HasValue && !_inputStates[input.Id].Value)
                                            {
                                                <Icon Name="IconName.ArrowDown" Style="color: green"/>
                                            }
                                        </TableRowCell>
                                    </TableRow>
                                }
                            </TableBody>
                        </Table>
                    </CardBody>
                </Card>
            </Column> 
        <Column ColumnSize="ColumnSize.IsHalf">
            <Card Margin="Margin.Is4.OnY">
                <CardTitle Margin="Margin.Is4.OnX">
                    Outputs
                </CardTitle>
                <CardBody>
                    <Table Hoverable="true" Narrow="true" ThemeContrast="ThemeContrast.Light">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Name</TableHeaderCell>
                                <TableHeaderCell>State</TableHeaderCell>
                                <TableHeaderCell></TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var output in _outputs.OrderBy(output => output.Name))
                            {
                                <TableRow>
                                    <TableRowHeader>
                                        @output.Name
                                    </TableRowHeader>
                                    <TableHeaderCell>
                                        @if (_outputStates[output.Id].HasValue && _outputStates[output.Id].Value)
                                        {
                                            <Icon Name="IconName.ArrowUp" Style="color: red"/>
                                        }
                                        else if (_outputStates[output.Id].HasValue && !_outputStates[output.Id].Value)
                                        {
                                            <Icon Name="IconName.ArrowDown" Style="color: green"/>
                                        }
                                    </TableHeaderCell>
                                    <TableRowCell>
                                        <Check TValue="bool?" Checked="@_outputStates[output.Id]" CheckedChanged="async checkedValue => await SetOutputState(output.Id, checkedValue)"/>
                                    </TableRowCell>
                                </TableRow>
                            }
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        </Column>
    </Row>
}

<Snackbar @ref="_snackbar" Color="@_snackbarColor">
    <SnackbarBody>
        @_snackbarMessage
    </SnackbarBody>
</Snackbar>

@code {
    private PaginatedItemsDto<Event> _events;
    
    private const string PreviousPageItem = "previous";
    private const string NextPageItem = "next";
    private const int PageSize = 5;
    private string _currentPage = "1";
    private int _pageItems = 1;
    private Color _eventRowColor = Color.Default;
    private bool _liveEventMonitoring;
    
    private List<Input> _inputs;
    private readonly Dictionary<int, bool?> _inputStates = new();
    
    private List<Output> _outputs;
    private readonly Dictionary<int, bool?> _outputStates = new();
    
    private HubConnection _hubConnection;
    
    private Snackbar _snackbar;
    private SnackbarColor _snackbarColor;
    private string _snackbarMessage = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
       
        _inputs = await Http.GetFromJsonAsync<List<Input>>(Paths.Inputs);
        if (_inputs != null)
        {
            foreach (var input in _inputs)
            {
                _inputStates[input.Id] = await GetInputState(input.Id);
            }
        }
        
        _outputs = await Http.GetFromJsonAsync<List<Output>>(Paths.Outputs);
        if (_outputs != null)
        {
            foreach (var output in _outputs)
            {
                _outputStates[output.Id] = await GetOutputState(output.Id);
            }
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Locations.DataChangeNotification))
            .WithAutomaticReconnect(new SignalRRetryPolicy())
            .Build();
        _hubConnection.On<int>(Methods.OutputInserted, async outputId =>
        {
            _outputs.Add( await Http.GetFromJsonAsync<Output>($"{Paths.Outputs}/{outputId}"));
            _outputStates[outputId] = await GetOutputState(outputId);
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.OutputDeleted, outputId =>
        {
            var output = _outputs.FirstOrDefault(o => o.Id == outputId);
            if (output == null) return;
            
            _outputs.Remove(output);
            _outputStates.Remove(output.Id);

            StateHasChanged();
        });
        _hubConnection.On<int, bool>(Methods.OutputStateChanged, (outputId, newState) =>
        {
            _outputStates[outputId] = newState;
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.InputInserted, async inputId =>
        {
            _inputs.Add( await Http.GetFromJsonAsync<Input>($"{Paths.Inputs}/{inputId}"));
            _inputStates[inputId] = await GetInputState(inputId);
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.InputDeleted, inputId =>
        {
            var input = _inputs.FirstOrDefault(i => i.Id == inputId);
            if (input == null) return;

            _inputs.Remove(input);
            _inputStates.Remove(input.Id);

            StateHasChanged();
        });
        _hubConnection.On<int, bool>(Methods.InputStateChanged, (input, newState) =>
        {
            _inputStates[input] = newState;
            
            StateHasChanged();
        });
        _hubConnection.On<int>(Methods.NewEventReceived, async _ =>
        {
            if (!_liveEventMonitoring) return;
            
            _events = await Http.GetFromJsonAsync<PaginatedItemsDto<Event>>(Paths.Events + $"?pageNumber=1&pageSize={PageSize}");
            _eventRowColor = Color.Warning;
            StateHasChanged();

            await Task.Delay(TimeSpan.FromSeconds(1));
            _eventRowColor = Color.Default;
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }
    
    private async Task<bool?> GetInputState(int inputId)
    {
        string url = $"{Paths.Inputs}/state/{inputId}";
        var response = await Http.GetAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            return null;
        }

        return bool.Parse(await response.Content.ReadAsStringAsync());
    }
    
    private async Task<bool?> GetOutputState(int outputId)
    {
        string url = $"{Paths.Outputs}/set/{outputId}";
        var response = await Http.GetAsync(url);
        if (!response.IsSuccessStatusCode)
        {
            return null;
        }

        return bool.Parse(await response.Content.ReadAsStringAsync());
    }
    
    private async Task SetOutputState(int outputId, bool? checkedValue)
    {
        string url = $"{Paths.Outputs}/set/{outputId}";
        url = QueryHelpers.AddQueryString(url, "state", checkedValue.ToString());
        var response = await Http.PostAsync(url, new StringContent(string.Empty));
        if (!response.IsSuccessStatusCode)
        {
            _snackbarMessage = "Unable to set output";
            _snackbarColor = SnackbarColor.Danger;
            await _snackbar.Show();
        }
    }
    
    private bool IsActive(string page) => _currentPage == page;

    private bool IsPageNavigationDisabled(string navigation)
    {
        return navigation switch
        {
            PreviousPageItem => _currentPage.Equals("1"),
            NextPageItem => _currentPage.Equals(_pageItems.ToString()),
            _ => false
        };
    }

    private async Task Previous()
    {
        var currentPageAsInt = int.Parse(_currentPage);
        if (currentPageAsInt > 1 )
        {
            _currentPage = (currentPageAsInt - 1).ToString();
        }
        
        await LoadEvents();
    }

    private async Task Next()
    {
        var currentPageAsInt = int.Parse(_currentPage);
        if (currentPageAsInt < _pageItems )
        {
            _currentPage = (currentPageAsInt + 1).ToString();
        }
        
        await LoadEvents();
    }

    private async Task SetActive(string page)
    {
        _currentPage = page;
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        _events = await Http.GetFromJsonAsync<PaginatedItemsDto<Event>>(Paths.Events + $"?pageNumber={_currentPage}&pageSize={PageSize}");
        _pageItems = _events.TotalItems / PageSize + (_events.TotalItems % PageSize > 0 ? 1 : 0);
    }

    private async Task ToggleLiveEventMonitoring()
    {
        _liveEventMonitoring = !_liveEventMonitoring;

        if (_liveEventMonitoring)
        {
            _events = await Http.GetFromJsonAsync<PaginatedItemsDto<Event>>(Paths.Events + $"?pageNumber=1&pageSize={PageSize}");
            _eventRowColor = Color.Warning;
            StateHasChanged();

            await Task.Delay(TimeSpan.FromSeconds(1));
            _eventRowColor = Color.Default;
            StateHasChanged();
        }
    }

}